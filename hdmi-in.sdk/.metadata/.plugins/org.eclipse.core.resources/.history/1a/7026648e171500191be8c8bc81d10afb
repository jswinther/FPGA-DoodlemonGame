/************************************************************************/
/*																		*/
/*	video_demo.c	--	ZYBO Video demonstration 						*/
/*																		*/
/************************************************************************/
/*	Author: Sam Bobrowicz												*/
/*	Copyright 2015, Digilent Inc.										*/
/************************************************************************/
/*  Module Description: 												*/
/*																		*/
/*		This file contains code for running a demonstration of the		*/
/*		Video input and output capabilities on the ZYBO. It is a good	*/
/*		example of how to properly use the display_ctrl and				*/
/*		video_capture drivers.											*/
/*																		*/
/*																		*/
/************************************************************************/
/*  Revision History:													*/
/* 																		*/
/*		11/25/2015(SamB): Created										*/
/*																		*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions						*/
/* ------------------------------------------------------------ */

#include "video_demo.h"
#include "video_capture/video_capture.h"
#include "display_ctrl/display_ctrl.h"
#include "intc/intc.h"
#include <stdio.h>
#include "xuartps.h"
#include "math.h"
#include <ctype.h>
#include <stdlib.h>
#include "xil_types.h"
#include "xil_cache.h"
#include "timer_ps/timer_ps.h"
#include "xparameters.h"
#include "xscugic.h"

/*
 * XPAR redefines
 */
#define DYNCLK_BASEADDR XPAR_AXI_DYNCLK_0_BASEADDR
#define VGA_VDMA_ID XPAR_AXIVDMA_0_DEVICE_ID
#define DISP_VTC_ID XPAR_VTC_0_DEVICE_ID
#define VID_VTC_ID XPAR_VTC_1_DEVICE_ID
#define VID_GPIO_ID XPAR_AXI_GPIO_VIDEO_DEVICE_ID
#define VID_VTC_IRPT_ID XPS_FPGA3_INT_ID
#define VID_GPIO_IRPT_ID XPS_FPGA4_INT_ID
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR
#define jumperGRAVITY 3

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

/*
 * Display and Video Driver structs
 */
DisplayCtrl dispCtrl;
XAxiVdma vdma;
VideoCapture videoCapt;

int flag;
INTC intc;
char fRefresh; //flag used to trigger a refresh of the Menu on video detect

/*
 * Framebuffers for video data
 */
u8 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u8 *pFrames[DISPLAY_NUM_FRAMES]; //array of pointers to the frame buffers

/*
 * Interrupt vector table
 */
const ivt_t ivt[] = {
	videoGpioIvt(VID_GPIO_IRPT_ID, &videoCapt),
	videoVtcIvt(VID_VTC_IRPT_ID, &(videoCapt.vtc))
};

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */



int main(void)
{
	DemoInitialize();
	DisplaySetMode(&dispCtrl, &VMODE_1920x1080);
	DisplayStart(&dispCtrl);
	DemoStartGame();


	return 0;
}

/* ------------------------------------------------------------ */
/*				Printing										*/
/* ------------------------------------------------------------ */

void DemoPrintBackground(u8 *frame, int width, int height) {
	int x, y, iPixelAddr;
	for(x = 0; x < (width*3); x+=3) {

					iPixelAddr = x;

					for(y = 0; y < height; y++)
					{
						frame[iPixelAddr] = 255;
						frame[iPixelAddr + 1] = 255;
						frame[iPixelAddr + 2] = 255;
						/*
						 * This pattern is printed one vertical line at a time, so the address must be incremented
						 * by the stride instead of just 1.
						 */
						iPixelAddr += DEMO_STRIDE;
					}
				}
	Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
}

void DemoPrintBlock(u8 *frame, struct Block *block, int color) {
	int cor = block->anchor;
	for(int i=0;i<block->height;i++) {
		for(int j=0;j<block->width;j+=3) {
			frame[cor + j] = color;
			frame[cor + j + 1] = color;
			frame[cor + j + 2] = color;
		}
		cor = cor + DEMO_STRIDE;
	}

}

void DemoPrintJumper(u8 *frame, int *array,  u32 anchor, int imgH, int imgW) {
	int cor = anchor;
	int arrayCounter = 0;
	for(int i = 0; i < imgH; i++) {
		for(int j = 0; j<imgW*3; j+=3) {
			if (jumperImg[arrayCounter] != 255){
			frame[cor + j + 0] = jumperImg[arrayCounter + 0];
			frame[cor + j + 1] = jumperImg[arrayCounter + 1];
			frame[cor + j + 2] = jumperImg[arrayCounter + 2];
			arrayCounter += 3;
			} else {
				arrayCounter+=3;
			}


		}
		cor = cor + DEMO_STRIDE;
	}

}

void DemoOverwriteJumper(u8 *frame, int *array,  u32 anchor, int imgH, int imgW) {
	int cor = anchor;
	int arrayCounter = 0;
	for(int i = 0; i < imgH; i++) {
		for(int j = 0; j<imgW*3; j+=3) {
			if (jumperImg[arrayCounter] != 255){
			frame[cor + j + 0] = 255;
			frame[cor + j + 1] = 255;
			frame[cor + j + 2] = 255;
			arrayCounter += 3;
			} else {
				arrayCounter+=3;
			}


		}
		cor = cor + DEMO_STRIDE;
	}

}

int collisiondetect (struct Block *jumper, struct Block *platform){
	int jumperw = jumper->width;
	int jumperh = (jumper->height)*3;
	int jumpera = jumper->anchor;
	int jumperLC = (jumpera + jumperh) + (jumperw*DEMO_STRIDE);
	int jumperRC = jumpera + jumperh;



	int platformw = platform->height;
	int platformh = platform->width;
	int platforma = platform->anchor;
	int platformLT = platforma + (platformw*DEMO_STRIDE);
	int platformRT = platforma;
	int g;
	int singleStepHeight = 0;
	for(int j = 0; j < platformh; j++){

	for(g = platformRT + singleStepHeight; g <= platformLT; g+=DEMO_STRIDE) {

			if(g == jumperLC || g == jumperRC) {
				return 1;

			}
		}
	singleStepHeight++;
	}
	return 0;
}



void DemoStartGame() {
	u8 *frame = dispCtrl.framePtr[dispCtrl.curFrame];
	u32 gameWidth = dispCtrl.vMode.width;
	u32 gameHeight = dispCtrl.vMode.height;




	/**
		 * Generate Sprite.
		 */
		//struct Block overWriteBlock = {0, 150, 150, 0, 0};
		//struct Block *overWrite = &overWriteBlock;
		struct Block jumperBlock = {0, 150, 150, 0, 0};
		struct Block *jumper = &jumperBlock;
		int jumperStart = DEMO_STRIDE*539+DEMO_STRIDE-(jumperBlock.width/2);
		jumperBlock.anchor = jumperStart;
		jumperBlock.floor = DEMO_STRIDE - jumperBlock.anchor + jumperBlock.height;

	/**
	 * Print game background.
	 */
	DemoPrintBackground(frame, gameWidth, gameHeight);
	/**
	 * jumperMovement FSM.
	 */
	enum Velocity jumperVelocity = GROUND;

	/**
	 * Generate Platforms.
	 */
	int numberofplatforms = 10;
	int random_x;
	int random_y;
	int hast = 5;
	struct Block platformBlock[numberofplatforms];
	struct Block *platform[numberofplatforms];
	int i, j;
	for(i = 0; i < numberofplatforms; i++) {
		random_x = rand() % 990 + 0;
		random_y = rand() % 5760 + 0;
		platformBlock[i].anchor = DEMO_STRIDE*random_x+random_y;
		platformBlock[i].height = 160;
		platformBlock[i].width = 24;
		platformBlock[i].floor = random_y;
		platform[i] = &platformBlock[i];
	}


	int counter = 0;
	int k=0;
	while(1) {

		for(j = 0; j < numberofplatforms; j++) {
			DemoPrintBlock(frame, platform[j], 255);
			platformBlock[j].anchor+=hast;
			platformBlock[j].floor+=hast;
			if(platformBlock[j].floor >= DEMO_STRIDE) {
				platformBlock[j].floor = 0;
				platformBlock[j].anchor = DEMO_STRIDE*(rand() % 900 + 0);
			}
			DemoOverwriteJumper(frame, jumperImg, jumperBlock.anchor, 150, 150);
		}
		switch(jumperVelocity) {
		case GROUND:
			counter = 0;
			jumperBlock.velocity = 24;
			jumperVelocity = AIR;
			break;
		case AIR:
			if(counter%10==0) {
				if(jumperBlock.velocity > -24)
					jumperBlock.velocity-=jumperGRAVITY;
			}
			jumperBlock.anchor -= jumperBlock.velocity;

			if(jumperBlock.velocity < 0) {

				for(k = 0; k < numberofplatforms; k++) {

					if((collisiondetect(jumper, platform[k]))==1) {

						jumperVelocity = GROUND;

					}
				}
			}
			counter++;
			break;
		}



		//DemoPrintBlock(frame, overWrite, overWriteBlock.anchor, 255);
		for(j = 0; j < numberofplatforms; j++) {
					DemoPrintBlock(frame, platform[j], 128);
				}
		//DemoPrintBlock(frame, jumper, jumperBlock.anchor, 0);
		DemoPrintJumper(frame, jumperImg, jumperBlock.anchor, 150, 150);
		Xil_DCacheFlushRange((unsigned int) frame, DEMO_MAX_FRAME);
	}
}

void DemoInitialize()
{
	int Status;
	XAxiVdma_Config *vdmaConfig;
	int i;

	/*
	 * Initialize an array of pointers to the 3 frame buffers
	 */
	for (i = 0; i < DISPLAY_NUM_FRAMES; i++)
	{
		pFrames[i] = frameBuf[i];
	}

	/*
	 * Initialize a timer used for a simple delay
	 */
	TimerInitialize(SCU_TIMER_ID);

	/*
	 * Initialize VDMA driver
	 */
	vdmaConfig = XAxiVdma_LookupConfig(VGA_VDMA_ID);
	if (!vdmaConfig)
	{
		xil_printf("No video DMA found for ID %d\r\n", VGA_VDMA_ID);
		return;
	}
	Status = XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	if (Status != XST_SUCCESS)
	{
		xil_printf("VDMA Configuration Initialization failed %d\r\n", Status);
		return;
	}


	/*
	 * Initialize the Display controller and start it
	 */
	Status = DisplayInitialize(&dispCtrl, &vdma, DISP_VTC_ID, DYNCLK_BASEADDR, pFrames, DEMO_STRIDE);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Display Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}
	Status = DisplayStart(&dispCtrl);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Couldn't start display during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Initialize the Interrupt controller and start it.
	 */
	Status = fnInitInterruptController(&intc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return;
	}
	fnEnableInterrupts(&intc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));

	/*
	 * Initialize the Video Capture device
	 */
	Status = VideoInitialize(&videoCapt, &intc, &vdma, VID_GPIO_ID, VID_VTC_ID, VID_VTC_IRPT_ID, pFrames, DEMO_STRIDE, DEMO_START_ON_DET);
	if (Status != XST_SUCCESS)
	{
		xil_printf("Video Ctrl initialization failed during demo initialization%d\r\n", Status);
		return;
	}

	/*
	 * Set the Video Detect callback to trigger the menu to reset, displaying the new detected resolution
	 */
	VideoSetCallback(&videoCapt, DemoISR, &fRefresh);

	DemoPrintBackground(dispCtrl.framePtr[dispCtrl.curFrame], dispCtrl.vMode.width, dispCtrl.vMode.height);

	return;
}

void GameRun() {
	int nextFrame = 0;
	char userInput = 0;
	/* Flush UART FIFO */
	while (userInput != 'q') {
		fRefresh = 0;
		DemoPrintMenu();
		/* Wait for data on UART */
		while (!XUartPs_IsReceiveData(UART_BASEADDR) && !fRefresh)
		{}

		/* Store the first character in the UART receive FIFO and echo it */
		if (XUartPs_IsReceiveData(UART_BASEADDR))
		{
			userInput = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
			xil_printf("%c", userInput);
		}
		else  //Refresh triggered by video detect interrupt
		{
			userInput = 'r';
		}
		switch (userInput)
		{
		case '2':
			nextFrame = dispCtrl.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES)
			{
				nextFrame = 0;
			}
			DisplayChangeFrame(&dispCtrl, nextFrame);
			break;
		case '3':
			if (videoCapt.state == VIDEO_STREAMING)
				VideoStop(&videoCapt);
			else
				VideoStart(&videoCapt);
			break;
		case '4':
			nextFrame = videoCapt.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES)
			{
				nextFrame = 0;
			}
			VideoChangeFrame(&videoCapt, nextFrame);
			break;
		case '5':
			nextFrame = videoCapt.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES)
			{
				nextFrame = 0;
			}
			VideoStop(&videoCapt);
			DemoInvertFrame(pFrames[videoCapt.curFrame], pFrames[nextFrame], videoCapt.timing.HActiveVideo, videoCapt.timing.VActiveVideo, DEMO_STRIDE);
			VideoStart(&videoCapt);
			DisplayChangeFrame(&dispCtrl, nextFrame);
			break;
		case '6':
			nextFrame = videoCapt.curFrame + 1;
			if (nextFrame >= DISPLAY_NUM_FRAMES)
			{
				nextFrame = 0;
			}
			VideoStop(&videoCapt);
			DemoScaleFrame(pFrames[videoCapt.curFrame], pFrames[nextFrame], videoCapt.timing.HActiveVideo, videoCapt.timing.VActiveVideo, dispCtrl.vMode.width, dispCtrl.vMode.height, DEMO_STRIDE);
			VideoStart(&videoCapt);
			DisplayChangeFrame(&dispCtrl, nextFrame);
			break;
		case 'q':
			break;
		case 'r':
			break;
		default :
			xil_printf("\n\rInvalid Selection");
			TimerDelay(500000);
		}
	}

	return;
}

void DemoPrintMenu()
{
	xil_printf("\x1B[H"); //Set cursor to top left of terminal
	xil_printf("\x1B[2J"); //Clear terminal
	xil_printf("**************************************************\n\r");
	xil_printf("*                ZYBO Video Demo                 *\n\r");
	xil_printf("**************************************************\n\r");
	xil_printf("*Display Resolution: %28s*\n\r", dispCtrl.vMode.label);
	printf("*Display Pixel Clock Freq. (MHz): %15.3f*\n\r", dispCtrl.pxlFreq);
	xil_printf("*Display Frame Index: %27d*\n\r", dispCtrl.curFrame);
	if (videoCapt.state == VIDEO_DISCONNECTED) xil_printf("*Video Capture Resolution: %22s*\n\r", "!HDMI UNPLUGGED!");
	else xil_printf("*Video Capture Resolution: %17dx%-4d*\n\r", videoCapt.timing.HActiveVideo, videoCapt.timing.VActiveVideo);
	xil_printf("*Video Frame Index: %29d*\n\r", videoCapt.curFrame);
	xil_printf("**************************************************\n\r");
	xil_printf("\n\r");
	xil_printf("1 - Change Display Resolution\n\r");
	xil_printf("2 - Change Display Framebuffer Index\n\r");
	xil_printf("3 - Start/Stop Video stream into Video Framebuffer\n\r");
	xil_printf("4 - Change Video Framebuffer Index\n\r");
	xil_printf("5 - Grab Video Frame and invert colors\n\r");
	xil_printf("6 - Grab Video Frame and scale to Display resolution\n\r");
	xil_printf("7 - Start Game\n\r");
	xil_printf("p - Print Square\n\r");
	xil_printf("q - Quit\n\r");
	xil_printf("\n\r");
	xil_printf("\n\r");
	xil_printf("Enter a selection:");
}

/*
void DemoPrintArray(u8 *frame, int *array, u32 anchor, int imgW, int imgH) {
	int i, counter;
	counter = 1;
	for(i=0;i<imgH*imgW;i++) {
		if(counter == imgW*3) {
			counter = 1;
			anchor+=DEMO_STRIDE;
		}
			frame[anchor + i] = array[i + 1];
			frame[anchor + i + 1] = array[i + 2];
			frame[anchor + i + 2] = array[i];


			counter++;

	}
}*/

void DemoCRMenu()
{
	xil_printf("\x1B[H"); //Set cursor to top left of terminal
	xil_printf("\x1B[2J"); //Clear terminal
	xil_printf("**************************************************\n\r");
	xil_printf("*                ZYBO Video Demo                 *\n\r");
	xil_printf("**************************************************\n\r");
	xil_printf("*Current Resolution: %28s*\n\r", dispCtrl.vMode.label);
	printf("*Pixel Clock Freq. (MHz): %23.3f*\n\r", dispCtrl.pxlFreq);
	xil_printf("**************************************************\n\r");
	xil_printf("\n\r");
	xil_printf("1 - %s\n\r", VMODE_640x480.label);
	xil_printf("2 - %s\n\r", VMODE_800x600.label);
	xil_printf("3 - %s\n\r", VMODE_1280x720.label);
	xil_printf("4 - %s\n\r", VMODE_1280x1024.label);
	xil_printf("5 - %s\n\r", VMODE_1920x1080.label);
	xil_printf("q - Quit (don't change resolution)\n\r");
	xil_printf("\n\r");
	xil_printf("Select a new resolution:");
}

void DemoInvertFrame(u8 *srcFrame, u8 *destFrame, u32 width, u32 height, u32 stride)
{
	u32 xcoi, ycoi;
	u32 lineStart = 0;
	for(ycoi = 0; ycoi < height; ycoi++)
	{
		for(xcoi = 0; xcoi < (width * 3); xcoi+=3)
		{
			destFrame[xcoi + lineStart] = ~srcFrame[xcoi + lineStart];         //Red
			destFrame[xcoi + lineStart + 1] = ~srcFrame[xcoi + lineStart + 1]; //Blue
			destFrame[xcoi + lineStart + 2] = ~srcFrame[xcoi + lineStart + 2]; //Green
		}
		lineStart += stride;
	}
	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) destFrame, DEMO_MAX_FRAME);
}

/*
 * Bilinear interpolation algorithm. Assumes both frames have the same stride.
 */
void DemoScaleFrame(u8 *srcFrame, u8 *destFrame, u32 srcWidth, u32 srcHeight, u32 destWidth, u32 destHeight, u32 stride)
{
	float xInc, yInc; // Width/height of a destination frame pixel in the source frame coordinate system
	float xcoSrc, ycoSrc; // Location of the destination pixel being operated on in the source frame coordinate system
	float x1y1, x2y1, x1y2, x2y2; //Used to store the color data of the four nearest source pixels to the destination pixel
	int ix1y1, ix2y1, ix1y2, ix2y2; //indexes into the source frame for the four nearest source pixels to the destination pixel
	float xDist, yDist; //distances between destination pixel and x1y1 source pixels in source frame coordinate system

	int xcoDest, ycoDest; // Location of the destination pixel being operated on in the destination coordinate system
	int iy1; //Used to store the index of the first source pixel in the line with y1
	int iDest; //index of the pixel data in the destination frame being operated on

	int i;

	xInc = ((float) srcWidth - 1.0) / ((float) destWidth);
	yInc = ((float) srcHeight - 1.0) / ((float) destHeight);

	ycoSrc = 0.0;
	for (ycoDest = 0; ycoDest < destHeight; ycoDest++)
	{
		iy1 = ((int) ycoSrc) * stride;
		yDist = ycoSrc - ((float) ((int) ycoSrc));

		/*
		 * Save some cycles in the loop below by presetting the destination
		 * index to the first pixel in the current line
		 */
		iDest = ycoDest * stride;

		xcoSrc = 0.0;
		for (xcoDest = 0; xcoDest < destWidth; xcoDest++)
		{
			ix1y1 = iy1 + ((int) xcoSrc) * 3;
			ix2y1 = ix1y1 + 3;
			ix1y2 = ix1y1 + stride;
			ix2y2 = ix1y1 + stride + 3;

			xDist = xcoSrc - ((float) ((int) xcoSrc));

			/*
			 * For loop handles all three colors
			 */
			for (i = 0; i < 3; i++)
			{
				x1y1 = (float) srcFrame[ix1y1 + i];
				x2y1 = (float) srcFrame[ix2y1 + i];
				x1y2 = (float) srcFrame[ix1y2 + i];
				x2y2 = (float) srcFrame[ix2y2 + i];

				/*
				 * Bilinear interpolation function
				 */
				destFrame[iDest] = (u8) ((1.0-yDist)*((1.0-xDist)*x1y1+xDist*x2y1) + yDist*((1.0-xDist)*x1y2+xDist*x2y2));
				iDest++;
			}
			xcoSrc += xInc;
		}
		ycoSrc += yInc;
	}

	/*
	 * Flush the framebuffer memory range to ensure changes are written to the
	 * actual memory, and therefore accessible by the VDMA.
	 */
	Xil_DCacheFlushRange((unsigned int) destFrame, DEMO_MAX_FRAME);

	return;
}

void DemoISR(void *callBackRef, void *pVideo)
{
	char *data = (char *) callBackRef;
	*data = 1; //set fRefresh to 1
}


